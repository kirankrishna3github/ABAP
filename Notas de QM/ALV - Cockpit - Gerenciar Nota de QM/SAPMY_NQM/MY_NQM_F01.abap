*&---------------------------------------------------------------------**&  Include           MY_NQM_F01*&---------------------------------------------------------------------**&---------------------------------------------------------------------**&      Form  f_verificar_range_nqm*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_verificar_range_nqm.  FREE r_nota_qm.  IF ynqm_1000-nqm_de IS NOT INITIAL.    w_nota_qm-option = 'EQ'            . " Equal    w_nota_qm-sign   = 'I'             . " Include    w_nota_qm-low    = ynqm_1000-nqm_de.    APPEND w_nota_qm TO r_nota_qm      .  ENDIF.  IF ynqm_1000-nqm_ate IS NOT INITIAL.    IF ynqm_1000-nqm_de > ynqm_1000-nqm_ate.      MESSAGE 'Nº da nota possui um valor inválido'(001)      TYPE 'E'.    ELSE.      FREE r_nota_qm.      w_nota_qm-sign   = 'I'              . " Include      w_nota_qm-option = 'BT'             . " Between      w_nota_qm-low    = ynqm_1000-nqm_de .      w_nota_qm-high   = ynqm_1000-nqm_ate.      APPEND w_nota_qm TO r_nota_qm       .    ENDIF.  ENDIF.ENDFORM.                    "f_verificar_range_nqm*&---------------------------------------------------------------------**&      Form  f_verificar_range_data*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_verificar_range_data.  DATA: vl_qtd_dias TYPE i.  FREE r_data.  IF ynqm_1000-dt_de IS NOT INITIAL.    w_data-option = 'EQ'           . " Equal    w_data-sign   = 'I'            . " Include    w_data-low    = ynqm_1000-dt_de.    APPEND w_data TO r_data        .  ENDIF.  IF ynqm_1000-dt_ate IS NOT INITIAL.    CALL FUNCTION 'HR_99S_INTERVAL_BETWEEN_DATES'      EXPORTING        begda = ynqm_1000-dt_de        endda = ynqm_1000-dt_ate      IMPORTING        days  = vl_qtd_dias.    IF vl_qtd_dias < 0.      MESSAGE 'Data até do documento possui um valor inválido'(002)      TYPE 'E'.    ELSE.      FREE r_data.      w_data-sign   = 'I'             . " Include      w_data-option = 'BT'            . " Between      w_data-low    = ynqm_1000-dt_de .      w_data-high   = ynqm_1000-dt_ate.      APPEND w_data TO r_data         .    ENDIF.  ENDIF.ENDFORM.                    "f_verificar_range_data*&---------------------------------------------------------------------**&      Form  f_montar_range_fornec*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_range_fornec.  FREE: r_fornec, lfa1-name1.  IF ynqm_1000-fornec IS NOT INITIAL.    w_fornec-option = 'EQ'            . " Equal    w_fornec-sign   = 'I'             . " Include    w_fornec-low    = ynqm_1000-fornec.    APPEND w_fornec TO r_fornec       .    SELECT SINGLE name1    FROM lfa1    INTO (lfa1-name1)    WHERE lifnr = ynqm_1000-fornec.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = lfa1-name1      IMPORTING        output_string = lfa1-name1.  ENDIF.ENDFORM.                    "f_montar_range_fornec*&---------------------------------------------------------------------**&      Form  f_montar_range_material*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_range_material.  FREE r_matnr.  IF ynqm_1000-matnr_de IS NOT INITIAL .    w_matnr-option = 'EQ'              . " Equal    w_matnr-sign   = 'I'               . " Include    w_matnr-low    = ynqm_1000-matnr_de.    APPEND w_matnr TO r_matnr          .  ENDIF.  IF ynqm_1000-matnr_ate IS NOT INITIAL.    IF ynqm_1000-matnr_de > ynqm_1000-matnr_ate.      MESSAGE 'Nº do material possui um valor inválido'(009)      TYPE 'E'.    ELSE.      FREE r_matnr.      w_matnr-sign   = 'I'                . " Include      w_matnr-option = 'BT'               . " Between      w_matnr-low    = ynqm_1000-matnr_de .      w_matnr-high   = ynqm_1000-matnr_ate.      APPEND w_nota_qm TO r_matnr         .    ENDIF.  ENDIF.ENDFORM.                    "f_montar_range_material*&---------------------------------------------------------------------**&      Form  f_montar_range_lote*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_range_lote.  FREE r_charg.  IF ynqm_1000-lote_de IS NOT INITIAL .    w_charg-option = 'EQ'             . " Equal    w_charg-sign   = 'I'              . " Include    w_charg-low    = ynqm_1000-lote_de.    APPEND w_charg TO r_charg         .  ENDIF.  IF ynqm_1000-lote_ate IS NOT INITIAL.    FREE r_charg.    w_charg-sign   = 'I'               . " Include    w_charg-option = 'BT'              . " Between    w_charg-low    = ynqm_1000-lote_de .    w_charg-high   = ynqm_1000-lote_ate.    APPEND w_charg TO r_charg          .  ENDIF.ENDFORM.                    "f_montar_range_lote*&---------------------------------------------------------------------**&      Form  f_montar_range_centro*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_range_centro.  FREE r_werks.  IF ynqm_1000-centro_de IS NOT INITIAL .    w_werks-option = 'EQ'              . " Equal    w_werks-sign   = 'I'               . " Include    w_werks-low    = ynqm_1000-centro_de.    APPEND w_werks TO r_werks          .  ENDIF.  IF ynqm_1000-lote_ate IS NOT INITIAL.    IF ynqm_1000-centro_de > ynqm_1000-centro_ate.      MESSAGE 'Nº do centro possui um valor inválido'(009)      TYPE 'E'.    ELSE.      FREE r_charg.      w_werks-sign   = 'I'                 . " Include      w_werks-option = 'BT'                . " Between      w_werks-low    = ynqm_1000-centro_de .      w_werks-high   = ynqm_1000-centro_ate.      APPEND w_werks TO r_werks            .    ENDIF.  ENDIF.ENDFORM.                    "f_montar_range_centro*&---------------------------------------------------------------------**&      Form  f_montar_range_autor*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_range_autor.  FREE: r_autor, bapiaddr3-fullname.  IF ynqm_1000-autor IS NOT INITIAL.    w_autor-option = 'EQ'           . " Equal    w_autor-sign   = 'I'            . " Include    w_autor-low    = ynqm_1000-autor.    APPEND w_autor TO r_autor       .*   Obtém o nome do usuário que inseriu    CALL FUNCTION 'BAPI_USER_GET_DETAIL'      EXPORTING        username = ynqm_1000-autor      IMPORTING        address  = bapiaddr3      TABLES        return   = t_return.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = bapiaddr3-fullname      IMPORTING        output_string = bapiaddr3-fullname.  ENDIF.ENDFORM.                    "f_montar_range_autor*&---------------------------------------------------------------------**&      Form  f_sel_search_help_local*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_sel_search_help_local.  DATA: t_local_aux TYPE STANDARD TABLE OF ty_local.  FREE: t_local, t_local_selec.  CLEAR qpct-kurztext.* Seleciona o grupo e o nome do local  SELECT codegruppe code kurztext  FROM qpct  INTO TABLE t_local  WHERE katalogart = c_local_defeito    AND codegruppe LIKE c_tp_defeito    AND sprache = sy-langu.* Exibe o Search Help dinâmico  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'    EXPORTING      retfield        = 'CODEGRUPPE'      value_org       = 'S'      multiple_choice = 'X'    TABLES      value_tab       = t_local      return_tab      = t_local_selec    EXCEPTIONS      parameter_error = 1      no_values_found = 2      OTHERS          = 3.  LOOP AT t_local_selec INTO w_local_selec.    CLEAR w_local.    READ TABLE t_local    INTO w_local    INDEX w_local_selec-recordpos.    IF sy-subrc = 0.      ynqm_1000-loc_nc = w_local-codegruppe.      CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'        EXPORTING          input_string  = w_local-kurztext        IMPORTING          output_string = qpct-kurztext.      APPEND w_local TO t_local_aux.    ENDIF.  ENDLOOP.* Atualiza a tabela com os locais selecionados  FREE t_local.  t_local[] = t_local_aux[].ENDFORM.                    "f_sel_search_help_local*&---------------------------------------------------------------------**&      Form  f_verificar_lote*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_verificar_lote.  CHECK ok_code = 'BTN_EXEC'.  IF ynqm_1002-charg IS INITIAL.    MESSAGE 'Informe o nº do lote'(006) TYPE 'E'.  ENDIF.ENDFORM.                    "f_verificar_lote*&---------------------------------------------------------------------**&      Form  f_selecionar_notas_qm*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_selecionar_notas_qm.  DATA: v_qtd_acoes_imediatas TYPE i       ,        v_indice              TYPE sy-tabix.  FREE: t_alv_nqm, w_alv_nqm, t_notas_qm, t_problema.* Verifica os status selecionados e monta um range  PERFORM: f_montar_status,           f_montar_local .  IF r_status IS INITIAL.    MESSAGE 'Selecione um status da nota!' TYPE 'S' DISPLAY LIKE 'E'.    EXIT.  ENDIF.* Seleciona detalhes da Nota de QM de acordo com a tela de seleção  SELECT qmel~qmnum  " Nº da nota         qmel~qmtxt  " Problema         qmel~erdat  " Data de criação do registro         qmel~matnr  " Nº do Material         qmel~mawerk " Centro para material         qmel~ernam  " Nome do autor da nota         qmel~objnr  " Nº objeto para administração de status         qmel~charg  " Número do lote         jest~stat   " Status individual de um objeto         jest~inact  " Código: status inativo         qmel~lifnum " Nº conta do fornecedor         lfa1~name1  " Nome do fornecedor         qmfe~otgrp  " Grupo do local         qmfe~oteil  " Código do local         qmfe~fegrp  " Grupo de código do problema         qmfe~fecod  " Código do problema  FROM qmel  INNER JOIN lfa1 ON lfa1~lifnr = qmel~lifnum  INNER JOIN jest ON jest~objnr = qmel~objnr  INNER JOIN qmfe ON qmfe~qmnum = qmel~qmnum  INTO TABLE t_notas_qm  FOR ALL ENTRIES IN t_local    WHERE qmel~qmnum    IN r_nota_qm      AND qmel~erdat    IN r_data      AND qmel~matnr    IN r_matnr      AND qmel~mawerk   IN r_werks      AND qmel~charg    IN r_charg      AND qmel~ernam    IN r_autor      AND qmel~lifnum   IN r_fornec      AND qmel~qmart    EQ c_nota_qm " Z1      AND jest~stat     IN r_status      AND jest~inact    EQ space      AND qmfe~otgrp    EQ t_local-codegruppe      AND qmfe~oteil    EQ t_local-code      AND qmfe~kzloesch EQ space.  SORT t_notas_qm ASCENDING.  LOOP AT t_notas_qm INTO w_notas_qm WHERE stat = c_marc_eliminacao.    DELETE t_notas_qm WHERE qmnum = w_notas_qm-qmnum                        AND stat  = c_msg_encerrada                        OR  stat  = c_msg_processamento.  ENDLOOP.* Seleciona a descrição dos problemas  IF t_notas_qm IS NOT INITIAL.    SELECT codegruppe code kurztext    FROM qpct    INTO TABLE t_problema    FOR ALL ENTRIES IN t_notas_qm    WHERE katalogart = c_tipo_defeito      AND codegruppe = t_notas_qm-fegrp      AND code       = t_notas_qm-fecod         AND sprache = sy-langu.  ELSE.    IF obj_cont_notas_qm IS NOT INITIAL.      obj_alv_grid_nqm->refresh_table_display( ).      CALL METHOD obj_cont_notas_qm->set_visible        EXPORTING          visible = cl_gui_control=>visible_false.      FREE obj_cont_notas_qm.    ENDIF.    MESSAGE 'Não há notas de QM para o filtro realizado'(003)    TYPE 'S' DISPLAY LIKE 'E'.    EXIT.  ENDIF.  LOOP AT t_notas_qm INTO w_notas_qm.*----------------------------------------------------------------------*   Local do problema*----------------------------------------------------------------------    CLEAR w_local.    READ TABLE t_local    INTO w_local    WITH KEY codegruppe = w_notas_qm-otgrp             code       = w_notas_qm-oteil.    IF sy-subrc = 0.      CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'        EXPORTING          input_string  = w_local-kurztext        IMPORTING          output_string = w_alv_nqm-loc_nc.    ELSE.      CLEAR w_alv_nqm-loc_nc.    ENDIF.*----------------------------------------------------------------------*   Descrição do Problema/Defeito*----------------------------------------------------------------------    CLEAR w_problema.    READ TABLE t_problema    INTO w_problema    WITH KEY codegruppe = w_notas_qm-fegrp             code       = w_notas_qm-fecod.    IF sy-subrc = 0.      CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'        EXPORTING          input_string  = w_problema-kurztext        IMPORTING          output_string = w_alv_nqm-problema.    ELSE.      CLEAR w_alv_nqm-problema.    ENDIF.*----------------------------------------------------------------------*   Usuário que criou a nota de QM*----------------------------------------------------------------------    CALL FUNCTION 'BAPI_USER_GET_DETAIL'      EXPORTING        username = w_notas_qm-ernam      IMPORTING        address  = w_detalhes      TABLES        return   = t_return.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = w_detalhes-fullname      IMPORTING        output_string = w_alv_nqm-autor.*----------------------------------------------------------------------*   Nome do fornecedor*----------------------------------------------------------------------    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = w_notas_qm-name1      IMPORTING        output_string = w_alv_nqm-forn_nome.*----------------------------------------------------------------------*   Status selecionado*----------------------------------------------------------------------    CLEAR w_status_selec.    READ TABLE t_status_selec    INTO w_status_selec    WITH KEY istat = w_notas_qm-stat.    IF sy-subrc = 0.      w_alv_nqm-stat = w_status_selec-desc.      IF w_status_selec-istat = c_msg_encerrada.        w_alv_nqm-alt_nc = c_icone_visualizar.      ELSE.        w_alv_nqm-alt_nc = c_icone_editar.      ENDIF.    ELSE.      CLEAR w_alv_nqm-stat.    ENDIF.    w_alv_nqm-nqm       = w_notas_qm-qmnum  . " Nº da Nota de QM    w_alv_nqm-dta_ab    = w_notas_qm-erdat  . " Data de Abertura    w_alv_nqm-lifnum    = w_notas_qm-lifnum . " Fornecedor    w_alv_nqm-aval_forn = c_icone_aval_forn . " Avaliar Fornecedor*   Verifica se tem Ações Imediatas    CLEAR v_qtd_acoes_imediatas.    SELECT COUNT( * )     FROM qmsm     INTO (v_qtd_acoes_imediatas)     WHERE qmnum = w_alv_nqm-nqm.    IF v_qtd_acoes_imediatas <> 0.      w_alv_nqm-acao_imed = c_icone_visualizar. " Ação Imediata    ELSE.      w_alv_nqm-acao_imed = c_icone_sem_acao.   " Ação Imediata    ENDIF.    w_alv_nqm-werks = w_notas_qm-mawerk.    w_alv_nqm-matnr = w_notas_qm-matnr .*----------------------------------------------------------------------*   Nome do material*----------------------------------------------------------------------    SELECT SINGLE maktx     FROM makt     INTO w_alv_nqm-maktx     WHERE matnr = w_alv_nqm-matnr.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = w_alv_nqm-maktx      IMPORTING        output_string = w_alv_nqm-maktx.    w_alv_nqm-charg = w_notas_qm-charg.    APPEND w_alv_nqm TO t_alv_nqm.  ENDLOOP. " LOOP AT t_notas_qm INTO w_notas_qm.  SORT t_alv_nqm BY nqm dta_ab DESCENDING.  PERFORM f_montar_fieldcatalog   TABLES t_fieldcat    USING w_fieldcat          c_tab_alv_notas_qm. " YALV_NQM_GERENC  PERFORM f_montar_alv    USING obj_cont_notas_qm          obj_alv_grid_nqm          c_cont_alv_notas_qm " CONT_ALV          t_fieldcat          t_alv_nqm          space          space          'X'.ENDFORM.                    "f_selecionar_notas_qm*&---------------------------------------------------------------------**&      Form  f_limpar_tela_1002*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_limpar_tela_1002.  FREE: t_alv_docnum, r_matnr, r_werks, w_matnr, w_werks, ynqm_1002.  IF obj_cont_docto IS NOT INITIAL.    obj_alv_grid_docto->refresh_table_display( ).    CALL METHOD obj_cont_docto->set_visible      EXPORTING        visible = cl_gui_control=>visible_false.    FREE obj_cont_docto.  ENDIF.ENDFORM.                    "f_limpar_tela_1002*&---------------------------------------------------------------------**&      Form  f_verificar_sub_contratacao*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_verificar_sub_contratacao.  TYPES: BEGIN OF ty_ordem_producao,           aufnr TYPE mseg-aufnr   ,           werks TYPE mseg-werks   ,         END OF ty_ordem_producao  .  DATA: t_ordem_producao TYPE STANDARD TABLE OF ty_ordem_producao,        w_ordem_producao LIKE LINE OF t_ordem_producao           .  SELECT aufnr werks   FROM mseg   INTO TABLE t_ordem_producao   WHERE charg = ynqm_1002-charg     AND bwart = c_entr_mercadoria  " 101     AND aufnr <> space.  SORT t_ordem_producao ASCENDING.  DELETE ADJACENT DUPLICATES FROM t_ordem_producao.  FREE t_sub_contratacao.* Procura o número do fornecedor através da ordem de produção  IF t_ordem_producao IS NOT INITIAL.    SELECT mblnr    " Nº documento de material           zeile    " Item no documento do material           bwart    " Tipo de movimento (administração de estoques)           werks    " Centro           charg    " Número do lote           lifnr    " Nº conta do fornecedor           aufnr    " Nº ordem           bstmg    " Qtd.entrada em unidade de medida de pedido      FROM mseg      INTO TABLE t_sub_contratacao      FOR ALL ENTRIES IN t_ordem_producao      WHERE bwart = c_entr_mercadoria  " 101        AND aufnr = t_ordem_producao-aufnr        AND werks = t_ordem_producao-werks        AND lifnr <> space.  ENDIF.* Ordem de Produção feitos no Aché não possuem sub-contratação* (não pode ser aberta uma Nota de QM para o próprio Aché)  IF t_ordem_producao IS NOT INITIAL     AND t_sub_contratacao IS INITIAL.    MESSAGE 'Impossível abrir nota de QM para esse lote'(010)    TYPE 'S' DISPLAY LIKE 'E'.  ELSE.*   Toda ordem de produção possui somente um lote    LOOP AT t_sub_contratacao INTO w_sub_contratacao.      w_sub_contratacao-charg = ynqm_1002-charg.      MODIFY t_sub_contratacao FROM w_sub_contratacao INDEX sy-tabix.    ENDLOOP.    PERFORM f_selecionar_docto_ref.  ENDIF.ENDFORM.                    "f_verificar_sub_contratacao*&---------------------------------------------------------------------**&      Form  f_selecionar_docto_ref*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_selecionar_docto_ref.  DATA v_indice_alv TYPE sy-tabix.  IF ynqm_1002-matnr IS NOT INITIAL.    w_matnr-option = 'EQ'           . " Equal    w_matnr-sign   = 'I'            . " Include    w_matnr-low    = ynqm_1002-matnr.    APPEND w_matnr TO r_matnr       .  ENDIF.  IF ynqm_1002-werks IS NOT INITIAL.    w_werks-option = 'EQ'           . " Equal    w_werks-sign   = 'I'            . " Include    w_werks-low    = ynqm_1002-werks.    APPEND w_werks TO r_werks       .  ENDIF.  FREE t_alv_docnum.  SELECT mkpf~xblnr    " Nº documento de referência         mseg~matnr    " Nº do material         mseg~werks    " Centro         mseg~charg    " Número do lotes         mkpf~mblnr    " Nº documento de material         mkpf~mjahr    " Ano do documento do material         mseg~zeile    " Item no documento do material         mseg~lifnr    " Nº conta do fornecedor         mseg~ebeln    " Nº pedido         mseg~ebelp    " Nº item do documento de compra         mseg~aufnr    " Nº ordem         mseg~bstmg    " Qtd.entrada em unidade de medida de pedido   FROM mkpf   INNER JOIN mseg ON mseg~mblnr = mkpf~mblnr                  AND mseg~mjahr = mkpf~mjahr   INTO TABLE t_alv_docnum   WHERE mseg~matnr IN r_matnr     AND mseg~werks IN r_werks     AND mseg~charg = ynqm_1002-charg     AND mseg~bwart = c_entr_mercadoria.                    " 101  LOOP AT t_alv_docnum INTO w_alv_docnum.    v_indice_alv = sy-tabix.    w_alv_docnum-cr_nqm = c_icone_criar.    IF w_alv_docnum-lifnr IS INITIAL.      CLEAR: w_sub_contratacao.      READ TABLE t_sub_contratacao      INTO w_sub_contratacao      WITH KEY aufnr = w_alv_docnum-aufnr.      IF sy-subrc = 0.        w_alv_docnum-lifnr = w_sub_contratacao-lifnr.      ELSE.        CLEAR w_alv_docnum-lifnr.      ENDIF.    ENDIF.    MODIFY t_alv_docnum FROM w_alv_docnum INDEX v_indice_alv.  ENDLOOP.  IF t_alv_docnum IS NOT INITIAL.    PERFORM f_montar_fieldcatalog     TABLES t_fieldcat      USING w_fieldcat            c_tab_alv_doctos. " YALV_NQM_DOCNUM    PERFORM f_montar_alv      USING obj_cont_docto            obj_alv_grid_docto            c_cont_alv_docnum " CONT_DOCNUM            t_fieldcat            t_alv_docnum            space            'X'            space.  ELSE.    IF obj_cont_docto IS NOT INITIAL.      obj_alv_grid_docto->refresh_table_display( ).      CALL METHOD obj_cont_docto->set_visible        EXPORTING          visible = space.      FREE obj_cont_docto.    ENDIF.    MESSAGE 'Não há documento de referência para os dados pesquisados'(005)    TYPE 'S' DISPLAY LIKE 'E'.  ENDIF.ENDFORM.                    "f_selecionar_docto_ref*&---------------------------------------------------------------------**&      Form  f_montar_status*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_status.  TYPES:    BEGIN OF ty_status_aux ,      desc TYPE c LENGTH 10,    END OF ty_status_aux       .  DATA: t_status TYPE STANDARD TABLE OF ty_status_aux,        w_status LIKE LINE OF t_status               .  FREE: t_status_selec, r_status.  IF ynqm_1000-st_aber IS NOT INITIAL.    w_status_selec-istat = c_msg_aberta.                    " I0068    w_status_selec-desc = 'Aberto'.    APPEND w_status_selec TO t_status_selec.  ENDIF.  IF ynqm_1000-st_conf IS NOT INITIAL.    w_status_selec-istat = c_msg_diferida.                  " I0069    w_status_selec-desc  = 'Confirm.'.    APPEND w_status_selec TO t_status_selec.  ENDIF.  IF ynqm_1000-st_proc IS NOT INITIAL.    w_status_selec-istat = c_msg_processamento.             " I0070    w_status_selec-desc = 'Em Proc.'.    APPEND w_status_selec TO t_status_selec.  ENDIF.  IF ynqm_1000-st_ence IS NOT INITIAL.    w_status_selec-istat = c_msg_encerrada.                 " I0072    w_status_selec-desc = 'Encerrado'.    APPEND w_status_selec TO t_status_selec.  ENDIF.  IF ynqm_1000-st_elim IS NOT INITIAL.    w_status_selec-istat = c_marc_eliminacao    .           " I0076    w_status_selec-desc = 'Marcado p/Eliminação'.    APPEND w_status_selec TO t_status_selec     .  ENDIF.  DATA v_qtd_itens TYPE i.  DESCRIBE TABLE t_status_selec LINES v_qtd_itens.  LOOP AT t_status_selec INTO w_status_selec.    IF sy-tabix < v_qtd_itens.      CONCATENATE w_status_selec-desc                  ','             INTO w_status_selec-desc.    ENDIF.    w_status-desc = w_status_selec-desc.    APPEND w_status TO t_status.    CHECK w_status_selec-istat IS NOT INITIAL.    w_r_status-option = 'EQ'                . " Equal    w_r_status-sign   = 'I'                 . " Include    w_r_status-low    = w_status_selec-istat.    APPEND w_r_status TO r_status           .  ENDLOOP.ENDFORM.                    "f_montar_status*&---------------------------------------------------------------------**&      Form  f_montar_local*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_montar_local.* Verifica se não foi selecionado nenhum local através do Search Help  CHECK t_local IS INITIAL.* Seleciona o grupo e o nome do local  SELECT codegruppe code kurztext  FROM qpct  INTO TABLE t_local  WHERE katalogart = c_local_defeito    AND codegruppe LIKE c_tp_defeito    AND sprache = sy-langu.ENDFORM.                    "f_montar_local*&---------------------------------------------------------------------**&      Form  event_hotspot_click*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------**      -->P_ROW      text*      -->P_COLUMN   text*----------------------------------------------------------------------*FORM event_hotspot_click USING p_row    TYPE lvc_s_row       p_column TYPE lvc_s_col.  CLEAR w_alv_nqm.  READ TABLE t_alv_nqm  INTO w_alv_nqm  INDEX p_row-index.  CASE p_column.    WHEN c_hotspot_nqm. " NQM      SET PARAMETER ID 'IQM' FIELD w_alv_nqm-nqm.      CALL TRANSACTION c_qm03 AND SKIP FIRST SCREEN.    WHEN c_hotspot_matnr. " MATNR      CASE sy-dynnr.        WHEN 1000.          SET PARAMETER ID 'MAT' FIELD w_alv_nqm-matnr.          CALL TRANSACTION c_mm03 AND SKIP FIRST SCREEN.        WHEN 1002.          CLEAR w_alv_docnum.          READ TABLE t_alv_docnum          INTO w_alv_docnum          INDEX p_row-index.          SET PARAMETER ID 'MAT' FIELD w_alv_docnum-matnr.          CALL TRANSACTION c_mm03 AND SKIP FIRST SCREEN.      ENDCASE.    WHEN c_hotspot_lote. " CHARG      CASE sy-dynnr.        WHEN 1000.          SET PARAMETER ID 'MAT' FIELD w_alv_nqm-matnr.          SET PARAMETER ID 'CHA' FIELD w_alv_nqm-charg.          SET PARAMETER ID 'WRK' FIELD w_alv_nqm-werks.          CALL TRANSACTION c_msc3n AND SKIP FIRST SCREEN.        WHEN 1002.          CLEAR w_alv_docnum.          READ TABLE t_alv_docnum          INTO w_alv_docnum          INDEX p_row-index.          SET PARAMETER ID 'MAT' FIELD w_alv_docnum-matnr.          SET PARAMETER ID 'CHA' FIELD w_alv_docnum-charg.          SET PARAMETER ID 'WRK' FIELD w_alv_docnum-werks.          CALL TRANSACTION c_msc3n AND SKIP FIRST SCREEN.      ENDCASE.    WHEN c_btn_criar_nqm. " CR_NQM      CLEAR w_alv_docnum.      READ TABLE t_alv_docnum      INTO w_alv_docnum      INDEX p_row-index.      FREE t_bdc.      PERFORM f_bdc_tela USING 'SAPLIQS0' '0200'.      PERFORM f_bdc_campo USING:       'RIWO00-QMART' c_nota_qm,       'BDC_OKCODE'   '/00'    .      PERFORM f_bdc_tela USING 'SAPLQM03' '0100'.      PERFORM f_bdc_campo USING:       'RQM01-MJAHR' w_alv_docnum-mjahr,       'RQM01-MBLNR' w_alv_docnum-mblnr,       'RQM01-MBLPO' w_alv_docnum-zeile,       'BDC_OKCODE' '=ENT1'            .      CLEAR: w_sub_contratacao.      READ TABLE t_sub_contratacao      INTO w_sub_contratacao      WITH KEY aufnr = w_alv_docnum-aufnr.      IF sy-subrc = 0.        PERFORM f_bdc_tela USING 'SAPLIQS0' '7200'.        PERFORM f_bdc_campo USING:         'BDC_OKCODE'   '=PART'.        PERFORM f_bdc_tela USING 'SAPLIPAR' '0200'.        PERFORM f_bdc_campo USING:         'IHPA-PARNR(01)' w_sub_contratacao-lifnr,         'BDC_OKCODE'   '/00'                    ,         'BDC_OKCODE'   '=BACK'                  .      ENDIF.      PERFORM f_bdc_tela USING 'SAPLIQS0' '7200'.      PERFORM f_bdc_campo USING:       'VIQMEL-REFNUM' space.      CALL TRANSACTION c_qm01       USING t_bdc       MODE v_mode            " N - Execução em Background       MESSAGES INTO t_msg.   " A - Passo-a-passo*                             " E - Pára nos erros    WHEN c_hotspot_fornec. " LIFNUM      SET PARAMETER ID 'LIF' FIELD w_alv_nqm-lifnum       .      SET PARAMETER ID 'KDY' FIELD c_chk_endereco_xk03.     " /110      CALL TRANSACTION c_xk03 AND SKIP FIRST SCREEN.    WHEN c_btn_alterar_nc. " ALT_NC      SET PARAMETER ID 'IQM' FIELD w_alv_nqm-nqm.      IF w_alv_nqm-alt_nc = c_icone_visualizar.        CALL TRANSACTION c_qm03 AND SKIP FIRST SCREEN.      ELSE.        CALL TRANSACTION c_qm02 AND SKIP FIRST SCREEN.      ENDIF.    WHEN c_btn_acao_imediata. " ACAO_IMED      PERFORM f_carregar_acao_imediata.    WHEN c_btn_aval_forn. " AVAL_FORN      CLEAR w_notas_qm.      READ TABLE t_notas_qm      INTO w_notas_qm      WITH KEY qmnum = w_alv_nqm-nqm.      IF sy-subrc = 0.        EXPORT: w_notas_qm-lifnum                w_notas_qm-matnr        TO MEMORY ID 'GNC_NQM'.        CALL TRANSACTION 'YNQM_REPORT'.      ENDIF.  ENDCASE.ENDFORM.                    "event_hotspot_click*---------------------------------------------------------------------**       FORM f_bdc_tela                                               **---------------------------------------------------------------------**  -->  VALUE(PAR1)                                                   **  -->  VALUE(PAR2)                                                   **---------------------------------------------------------------------*FORM f_bdc_tela  USING value(par1)        value(par2).  CLEAR t_bdc.  t_bdc-program  = par1.  t_bdc-dynpro   = par2.  t_bdc-dynbegin = 'X'.  APPEND t_bdc.ENDFORM.                    "f_bdc_tela*---------------------------------------------------------------------**       FORM f_bdc_campo                                              **---------------------------------------------------------------------**  -->  VALUE(PAR1)                                                   **  -->  VALUE(PAR2)                                                   **---------------------------------------------------------------------*FORM f_bdc_campo  USING value(par1)        value(par2).  CLEAR t_bdc.  t_bdc-fnam = par1.  t_bdc-fval = par2.  APPEND t_bdc.ENDFORM.                    "f_bdc_campo*&---------------------------------------------------------------------**&      Form  f_carregar_acao_imediata*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_carregar_acao_imediata.  FREE: t_alv_acao_im, ynqm_1001.  CLEAR w_notas_qm.  READ TABLE t_notas_qm  INTO w_notas_qm  WITH KEY qmnum = w_alv_nqm-nqm.  ynqm_1001-nqm       = w_alv_nqm-nqm      .  ynqm_1001-lifnr     = w_alv_nqm-lifnum   .  ynqm_1001-forn_nome = w_alv_nqm-forn_nome.  ynqm_1001-matnr     = w_notas_qm-matnr   .  ynqm_1001-charg     = w_notas_qm-charg   .  ynqm_1001-loc_nc    = w_alv_nqm-loc_nc   .  SELECT SINGLE maktx  FROM makt  INTO (ynqm_1001-maktx)  WHERE matnr = w_notas_qm-matnr.  CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'    EXPORTING      input_string  = ynqm_1001-maktx    IMPORTING      output_string = ynqm_1001-maktx.  CLEAR w_problema.  READ TABLE t_problema  INTO w_problema  WITH KEY codegruppe = w_notas_qm-fegrp           code       = w_notas_qm-fecod.  IF sy-subrc = 0.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = w_problema-kurztext      IMPORTING        output_string = ynqm_1001-defeito.  ELSE.    CLEAR ynqm_1001-defeito.  ENDIF.  FREE t_acao_imediata.  SELECT qmsm~mnkat    " Tipo de catálogo - medidas         qmsm~mngrp    " Grupo de codes - medidas         qmsm~mncod    " Código de medidas         qpct~kurztext " Descrição da Ação Imediata         qmsm~peter    " Data planejada para conclusão         qmsm~objnr    " Nº objeto para administração de status         qmsm~parnr    " Responsável pela medida (nº parceiro)         jest~stat     " Código do Status         tj02t~txt30   " Descrição do status  FROM qmsm  INNER JOIN qpct ON  qpct~katalogart = qmsm~mnkat                  AND qpct~codegruppe = qmsm~mngrp                  AND qpct~code       = qmsm~mncod  INNER JOIN jest  ON jest~objnr      = qmsm~objnr  INNER JOIN tj02t ON tj02t~istat     = jest~stat  INTO TABLE t_acao_imediata    WHERE qmsm~qmnum    = w_alv_nqm-nqm      AND jest~inact    = space      AND tj02t~spras   = c_pt_br      AND qpct~sprache  = c_pt_br      AND qmsm~kzloesch = space.  LOOP AT t_acao_imediata INTO w_acao_imediata.    CALL FUNCTION 'YNQM_CONVERT_FIRSTCHAR_TOUPPER'      EXPORTING        input_string  = w_acao_imediata-kurztext      IMPORTING        output_string = w_alv_acao_im-acao_im.    w_alv_acao_im-usuario = w_acao_imediata-parnr.    w_alv_acao_im-dt_venc = w_acao_imediata-peter.    w_alv_acao_im-stat    = w_acao_imediata-txt30.    APPEND w_alv_acao_im TO t_alv_acao_im.  ENDLOOP.  IF t_alv_acao_im IS NOT INITIAL.    CALL SCREEN 1001 STARTING AT 35 01.  ELSE.    MESSAGE 'Não há ações imediatas para a nota selecionada'(004)    TYPE 'S' DISPLAY LIKE 'E'.  ENDIF.ENDFORM.                    "f_carregar_acao_imediata*&---------------------------------------------------------------------**&      Form  f_exibir_alv_acoes_imediatas*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------*FORM f_exibir_alv_acoes_imediatas.  PERFORM f_montar_fieldcatalog   TABLES t_fieldcat    USING w_fieldcat          c_tab_alv_acoes_im. " YALV_NQM_ACOES_IM  PERFORM f_montar_alv    USING obj_cont_acao_im          obj_alv_grid_acao          c_cont_alv_acoes_im " CONT_ACAO_IM          t_fieldcat          t_alv_acao_im          space          'X'          space.ENDFORM.                    "f_exibir_alv_acoes_imediatas*&---------------------------------------------------------------------**&      Form  f_montar_fieldcatalog*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------**      -->P_T_FCAT    text*      -->P_W_FCAT    text*      -->P_STRUCTURE text*----------------------------------------------------------------------*FORM f_montar_fieldcatalog  TABLES p_t_fcat    TYPE lvc_t_fcat   USING p_w_fcat    TYPE lvc_s_fcat         p_structure TYPE ddobjname.  DATA:    t_campos TYPE STANDARD TABLE OF dd03p,    w_campos LIKE LINE OF t_campos      .  DATA:    v_campo       TYPE rollname       ,    v_nome_coluna TYPE dd04t-scrtext_m.  CONSTANTS:    c_versao_ativa TYPE ddobjstate VALUE 'A'.  FREE: p_t_fcat, p_w_fcat.* Obtém o nome dos campos da estrutura da SE11  CALL FUNCTION 'DDIF_TABL_GET'    EXPORTING      name          = p_structure      state         = c_versao_ativa    TABLES      dd03p_tab     = t_campos    EXCEPTIONS      illegal_input = 1      OTHERS        = 2.  LOOP AT t_campos INTO w_campos.    v_campo = w_campos-rollname.*   Seleciona a descrição média do elemento de dados    SELECT SINGLE scrtext_m    FROM  dd04t    INTO (v_nome_coluna)     WHERE rollname  = v_campo      AND ddlanguage = c_pt_br      AND as4local   = c_versao_ativa.    MOVE-CORRESPONDING w_campos TO p_w_fcat.    p_w_fcat-col_pos   = w_campos-position .    p_w_fcat-coltext   = v_nome_coluna     .    CASE w_campos-fieldname.      WHEN c_hotspot_nqm   " NQM        OR c_hotspot_lote. " CHARG        p_w_fcat-outputlen = w_campos-scrlen1.        p_w_fcat-hotspot   = 'X'.      WHEN 'LOC_NC'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN 'PROBLEMA'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN 'STAT'.        p_w_fcat-outputlen = w_campos-scrlen2.      WHEN 'DTA_AB'.        p_w_fcat-outputlen = w_campos-scrlen1.      WHEN 'AUTOR'.        p_w_fcat-outputlen = w_campos-scrlen2.      WHEN c_hotspot_fornec. " LIFNUM.        p_w_fcat-outputlen = w_campos-scrlen1.        p_w_fcat-hotspot   = 'X'.      WHEN 'FORN_NOME'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN c_btn_alterar_nc     " ALT_NC        OR c_btn_acao_imediata  " ACAO_IMED        OR c_btn_aval_forn      " AVAL_FORN        OR c_btn_criar_nqm.     " CR_NQM        p_w_fcat-outputlen = w_campos-scrlen1.        p_w_fcat-hotspot   = 'X'.        p_w_fcat-icon      = 'X'.      WHEN c_hotspot_matnr. " MATNR        p_w_fcat-outputlen = w_campos-scrlen1.        p_w_fcat-hotspot   = 'X'.      WHEN 'MAKTX'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN 'ACAO_IM'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN 'USUARIO'.        p_w_fcat-outputlen = w_campos-scrlen3.      WHEN 'DT_VENC'.        p_w_fcat-outputlen = w_campos-scrlen2.      WHEN 'STAT'.        p_w_fcat-outputlen = w_campos-scrlen2.    ENDCASE.    APPEND p_w_fcat TO p_t_fcat.    CLEAR p_w_fcat.  ENDLOOP.ENDFORM.                    "f_montar_fieldcatalog*&---------------------------------------------------------------------**&      Form  f_montar_alv*&---------------------------------------------------------------------**       text*----------------------------------------------------------------------**      -->P_CONTAINER text*      -->P_ALV_GRID  text*      -->P_NOME_CONT text*      -->P_FIELDCAT  text*      -->P_TL_ALV    text*      -->P_TITULO    text*      -->P_NO_TOOLBAR text*      -->P_VARIANT  text*----------------------------------------------------------------------*FORM f_montar_alv USING p_container  TYPE REF TO cl_gui_custom_container       p_alv_grid   TYPE REF TO cl_gui_alv_grid       p_nome_cont  TYPE scrfname       p_fieldcat   TYPE lvc_t_fcat       p_tl_alv     TYPE STANDARD TABLE       p_titulo     TYPE lvc_s_layo-grid_title       p_no_toolbar TYPE c       p_variant    TYPE c.  IF p_container IS NOT INITIAL.    p_alv_grid->refresh_table_display( ).    CALL METHOD p_container->set_visible      EXPORTING        visible = cl_gui_control=>visible_false.    FREE p_container.  ENDIF.  CREATE OBJECT p_container    EXPORTING      container_name              = p_nome_cont    EXCEPTIONS      cntl_error                  = 1      cntl_system_error           = 2      create_error                = 3      lifetime_error              = 4      lifetime_dynpro_dynpro_link = 5      OTHERS                      = 6.  CALL METHOD p_container->set_visible    EXPORTING      visible = cl_gui_control=>visible_true.* Cria uma instância da classe cl_gui_alv_grid no custom container* inserido no layout da tela  CREATE OBJECT p_alv_grid    EXPORTING      i_parent          = p_container    EXCEPTIONS      error_cntl_create = 1      error_cntl_init   = 2      error_cntl_link   = 3      error_dp_create   = 4      OTHERS            = 5.* Atribui os métodos da classe local lcl_evento_alv à do ALV  DATA: o_evt TYPE REF TO lcl_evento_alv.  CREATE OBJECT o_evt.  SET HANDLER o_evt->hotspot_click FOR p_alv_grid.  DATA: wl_alv_layout TYPE lvc_s_layo.  wl_alv_layout-zebra      = 'X'     . " Zebrado  wl_alv_layout-grid_title = p_titulo. " Titulo do ALV* Variante de tela para que o usuário altere a exibição dos campos  DATA: wl_variante TYPE disvariant.  IF p_variant IS NOT INITIAL.    wl_alv_layout-sel_mode = 'A'     .    wl_variante-report     = sy-repid.    wl_variante-username   = sy-uname.  ENDIF.* Exclui os botões da barra de tarefas do ALV  DATA: t_excluir_campo TYPE ui_functions.  IF p_no_toolbar IS NOT INITIAL.    wl_alv_layout-no_toolbar = p_no_toolbar.  ELSE.*   Exclui os botões da barra de tarefas do alv (exportar p/ excel)    APPEND cl_gui_alv_grid=>mc_fc_sum            TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_subtot         TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_undo       TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_append_row TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_copy       TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row   TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_cut        TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_move_row   TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_loc_paste      TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_views          TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_view_crystal   TO t_excluir_campo.    APPEND cl_gui_alv_grid=>mc_fc_detail         TO t_excluir_campo.  ENDIF.  CALL METHOD p_alv_grid->set_table_for_first_display    EXPORTING      is_layout                     = wl_alv_layout      is_variant                    = wl_variante      i_save                        = 'A'      it_toolbar_excluding          = t_excluir_campo    CHANGING      it_outtab                     = p_tl_alv      it_fieldcatalog               = p_fieldcat    EXCEPTIONS      invalid_parameter_combination = 1      program_error                 = 2      too_many_lines                = 3      OTHERS                        = 4.  p_alv_grid->refresh_table_display( ).ENDFORM.                    "f_montar_alv